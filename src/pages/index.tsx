import Head from "next/head";
import React from "react";

export default function Home() {
  return (
    <>
      <Head>
        <title>Create T3 App</title>
        <meta name="description" content="Generated by create-t3-app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>

      <main className="flex min-h-screen flex-col items-center justify-center bg-gradient-to-b">
        <div className="container flex flex-col items-center justify-center gap-12 px-4 py-16 ">
          <h1 className="text-5xl font-extrabold">Game of Life</h1>

          <Board />
        </div>
      </main>
    </>
  );
}

function Board() {
  const width = 30;
  const height = 30;

  const [running, setRunning] = React.useState<boolean>(false);
  const runningRef = React.useRef(running);
  runningRef.current = running;

  const [state, setState] = React.useState<boolean[]>(
    new Array(width * height).fill(false),
  );

  const runSimulation = React.useCallback(() => {
    if (!runningRef.current) {
      return;
    }

    setState((cur) => simulateGeneration(cur, width));
    setTimeout(runSimulation, 500);
  }, []);

  return (
    <div className="flex flex-col gap-6">
      <div>
        {range(height).map((rowIdx) => (
          <div key={rowIdx} className="flex">
            {range(width).map((colIdx) => {
              const cellIdx = colIdx * width + rowIdx;
              return (
                <Cell
                  key={cellIdx}
                  alive={state[cellIdx] ?? false}
                  onClick={() =>
                    setState((cur) =>
                      cur.map((s, i) => (i !== cellIdx ? s : !s)),
                    )
                  }
                />
              );
            })}
          </div>
        ))}
      </div>

      <div className="flex gap-6">
        <button onClick={() => setState((cur) => cur.map(() => false))}>
          clear
        </button>
        <button
          onClick={() => {
            setRunning((cur) => !cur);
            runningRef.current = true;
            runSimulation();
          }}
        >
          {running ? "stop" : "go"}
        </button>
      </div>
    </div>
  );
}

type CellProps = {
  alive: boolean;
  onClick: () => void;
};

function Cell(props: CellProps) {
  const color = props.alive ? "bg-black" : "";

  return (
    <div
      className={"border border-gray-500 p-3 hover:cursor-pointer " + color}
      onClick={props.onClick}
    ></div>
  );
}

function range(size: number) {
  return [...Array(size).keys()];
}

function simulateGeneration(state: boolean[], width: number): boolean[] {
  return state.map((_, i) => simulateCell(i, state, width));
}

function simulateCell(idx: number, state: boolean[], width: number): boolean {
  const neighborIdxs = [
    idx - width - 1,
    idx - width,
    idx - width + 1,
    idx - 1,
    idx + 1,
    idx + width - 1,
    idx + width,
    idx + width + 1,
  ];

  const aliveNeighbors = neighborIdxs
    .map((i) => (state[i] ? 1 : 0))
    .reduce((prev, cur) => prev + cur, 0 as number);
  const currentlyAlive = state[idx];

  if (!currentlyAlive && aliveNeighbors === 3) {
    return true;
  } else if (currentlyAlive && [2, 3].includes(aliveNeighbors)) {
    return true;
  }
  return false;
}
